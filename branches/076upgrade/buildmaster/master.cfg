# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Lets define the type of environment, this will allow you to load a 
# different config file depending on whether you are developing, or 
# in production
# This can be either 'production' or 'development'
#environment='production'
environment='development'

# The actual loading of these files needs to be done last

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
#c['slaves'] = [BuildSlave("bot1name", "bot1passwd")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]

## This is now defined in %environment%.cfg

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()
from buildbot.changes.bonsaipoller import BonsaiPoller

c['change_source'] = BonsaiPoller("http://bonsai.go-oo.org", "OpenOffice2", "", "all", "%2Fhome%2Fooweb%2Fcvsup", pollInterval=60)


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
from buildbot.scheduler import AnyBranchScheduler
#c['schedulers'] = []
#c['schedulers'].append(Scheduler(name="all", branch=None,
#                                 treeStableTimer=2*60,
#                                 builderNames=["buildbot-full"]))
## This is now defined in %environment%.cfg

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
cvsmodule = "buildbot"

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, WithProperties
from buildbot.steps.transfer import FileUpload
from OOShell import OOShellCommand
from OOUpload import MyUpload
from OOCompile import OOCompile
#f1 is no longer available
#f2 is cloph's builder
f2 = BuildFactory()
f2.addStep(OOShellCommand, description="Everything", haltOnFailure=True, workdir='/home/buildslave/botwork',
            command=["tinget.pl",
                    WithProperties("--branch=%s", "branch"),
                               WithProperties("--revision=%s", "revision"),
                               WithProperties("--languages=\"%s\"", "languages"),
                               WithProperties("--install_set=%s", "install_set")])
f2.addStep(OOShellCommand, description="Prep", haltOnFailure=True,
           workdir="workdir", command=["../../buildprep"])
f2.addStep(OOShellCommand, description="Configure", haltOnFailure=True,
           workdir="workdir", command=["../../configure"])
f2.addStep(OOShellCommand, description="Bootstrap", haltOnFailure=True,
           workdir="workdir", command=["../../bootstrap"])
f2.addStep(OOCompile, description="Compile", haltOnFailure=True,
           workdir="workdir", command=["../../compile"])
f2.addStep(OOShellCommand, description="Smoketest", haltOnFailure=False,
           workdir="workdir", command=["../../smoketestoo"])
f2.addStep(OOShellCommand, description="Bundle",
           haltOnFailure=True,
           workdir="workdir",
           command=["../../bundle",
                   "install_set.zip"])
f2.addStep(MyUpload, workdir="workdir",
           blocksize=640*1024,
           slavesrc="install_set.zip",
           mode=0644,
           masterdest="install_set.zip")

f3 = BuildFactory()

# f3 is the new cws step development builder
f3.addStep(ShellCommand (description="CWS", haltOnFailure=True,
                      workdir='.',
                      command=["../cws_get", 
                               WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ],
                      timeout=7200,
           want_stderr=True))
f3.addStep(ShellCommand (description="Prep", haltOnFailure=True,
           workdir="workdir", command=["../../buildprep", 
                               WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ]))
f3.addStep(ShellCommand (description="Configure", haltOnFailure=True,
           workdir="workdir", command=["../../configure", 
                               WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ]))
f3.addStep(ShellCommand (description="Bootstrap", haltOnFailure=True,
           workdir="workdir", command=["../../bootstrap", 
                               WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ]))
f3.addStep(ShellCommand (description="Compile", haltOnFailure=True,
           workdir="workdir", command=["../../compile", 
                               WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ]))
f3.addStep(ShellCommand (description="Smoketest", haltOnFailure=False,
           workdir="workdir", command=["../../smoketestoo", 
                               WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ]))
f3.addStep(ShellCommand (description="Bundle Installset", haltOnFailure=False,
           workdir="workdir", command=["../../bundle", 
                               WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ]))
f3.addStep(FileUpload (workdir="workdir",
#f3.addStep(MyUpload (workdir="workdir",
           blocksize=640*1024,
           slavesrc="install_set.zip",
           mode=0644,
           masterdest="install_set.zip"))

# f4 is for "source" builder
f4 = BuildFactory()
f4.addStep(ShellCommand, description="CWS", haltOnFailure=True,
                      workdir='.',
                      command=["../cws_get", 
                                WithProperties("--branch=%s", "branch"),
                                WithProperties("--buildername=%s", "buildername"),
                                WithProperties("--buildnumber=%s", "buildnumber"),
                                WithProperties("--slavename=%s", "slavename"),
                                WithProperties("--revision=%s", "revision"),
                                #WithProperties("--languages=\"%s\"", "languages"),
                                #WithProperties("--install_set=%s", "install_set")
                                ],
                      timeout=7200,
           want_stderr=True)
f4.addStep(ShellCommand, description="Calculating SLOC", descriptionDone="SLOC calculated", haltOnFailure=True,
           workdir='workdir',
           command=["../../sloccount",
                    WithProperties("--branch=%s", "branch"),
                    WithProperties("--buildername=%s", "buildername"),
                    WithProperties("--buildnumber=%s", "buildnumber"),
                    WithProperties("--slavename=%s", "slavename"),
                    WithProperties("--revision=%s", "revision"),
                    #WithProperties("--languages=\"%s\"", "languages"),
                    #WithProperties("--install_set=%s", "install_set")
                    ],
                    timeout=2000, want_stderr=True)


## The builders are stored in %environment%.cfg

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, 
                                  allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@140.211.166.227",
                                     extraRecipients=["buildbot@shaunmcdonald.me.uk"],
                                     sendToInterestedUsers=False))
#
from buildbot.status import words
c['status'].append(words.IRC(host="irc.freenode.net", 
                             nick="bb",
                             channels=["#unhack-oo"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")



####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "OpenOffice.org"
c['projectURL'] = "http://www.openoffice.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://140.211.166.227:8010/"


####### Load the config files for the specific environment now.
f = open('%s.cfg' %environment)
exec f
f.close()
