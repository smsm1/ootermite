# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


# pre-preqs for environments
from buildbot.scheduler import Scheduler
from buildbot.scheduler import AnyBranchScheduler


# Lets define the type of environment, this will allow you to load a 
# different config file depending on whether you are developing, or 
# in production
# This can be either 'production' or 'development'
environment= 'production'

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.

# now defined in production/development.cfg

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9999

####### SCHEDULERS

## configure the Schedulers

#now defined in production/development.cfg

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

from buildbot.process import factory
from buildbot.steps.source import CVS
from buildbot.steps.shell import Compile
from buildbot.steps.shell import ShellCommand
from buildbot.steps.python_twisted import Trial

from buildbot.steps.shell import WithProperties


import os, os.path, re
from rfc822 import Message

from buildbot import util
from buildbot.changes import base, changes #, maildirtwisted 
from buildbot.changes import mail


f1 = factory.BuildFactory()

f1.addStep(ShellCommand, description="Setsolar", haltOnFailure=True,
           workdir=".", command=["../steps/setsolar", WithProperties("%(branch)s")])
f1.addStep(ShellCommand, description="Build", haltOnFailure=True,
           workdir=".", command=["../steps/build", 
		WithProperties("%(branch)s"),
		WithProperties("%(buildername)s"),
		WithProperties("%(buildnumber)s")])



# builders defined in productio/development.cfg

###### ENVIRONEMNT
f= open('%s.cfg' % environment)
exec f
f.close()



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import words
from OOtinder import OOTinderboxMailNotifier
from buildbot.status import mail
from buildbot.status import html

c['status'] = []

from buildbot.status.html import WebStatus
#c['status'].append(html.Waterfall(http_port=8090))
c['status'].append(WebStatus(http_port=8080,allowForce=True))


#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "StarOffice"
c['projectURL'] = "http://so-wiki/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://so-berlin:8080/"
