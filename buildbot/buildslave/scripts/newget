#!/usr/bin/env perl

use warnings;
use strict;
use LWP::Simple;
use Getopt::Long;
use File::Temp qw/ tempfile tempdir /;
use Cwd;
use Data::Dumper;
use DB_File;
use File::Copy::Recursive qw(rcopy);
use File::Path;

############################ Globals
my $DEBUG= 0;
my $CACHE_SIZE= 4;
my $CVS_ROOT= ':pserver:anoncvs@anoncvs.services.openoffice.org:/cvs';
my $CVS_OPTIONS = "-z9";

############################ Prototypes
sub run;
sub grab_milestone($);
sub grab_cws_or_milestone($);
sub grab_tag_list();
sub cache_get($);
sub is_milestone($);
sub latest_milestone();

############################ Subs			  
sub run
{
    if ($DEBUG)
    {
	print "system(\"" . join ('", "', @_) . "\");\n";
    }
    else
    {
	die "can't run $_[0]!!\n" unless !system(@_);
    }
}

sub grab_milestone($)
{
    my $milestone= shift;
    
    my $cwd = &Cwd::cwd();
    my $tempdir = tempdir ( $milestone . "-XXXX", DIR => $cwd, CLEANUP => 1);
    chdir($tempdir);
    run('cvs', '-d', $CVS_ROOT, $CVS_OPTIONS, 'co', '-r', $milestone, 'OpenOffice2');
    my @files= glob '*';
    run('tar', 'cjvf', "$cwd/$milestone.tar.bz2", @files);
    chdir $cwd;
    return $tempdir;
}


sub grab_cws_or_milestone($)
{
    my $name = shift;
    if ($name eq 'HEAD' || $name eq '')
    {
	$name= latest_milestone();
    }
    
    if(is_milestone($name))
    {
	cache_get($name);
    }
    else
    {
	my $cws_list= grab_tag_list;
	die "cws not found!!\n" unless $cws_list->{$name};	
	my $cws_tag= $cws_list->{$name}->{'tag'};
	my $cwd = &Cwd::cwd();
	cache_get($cws_list->{$name}->{'base'});
	chdir 'workdir';
	foreach (@{$cws_list->{$name}->{'dirs'}})
	{
	    run('cvs', "-d", "$CVS_ROOT", "$CVS_OPTIONS", 'co', "-Pr", "$cws_tag", "$_");
	}
	chdir $cwd;
    }
}

sub grab_tag_list()
{
    my $url= 'http://go-oo.org/tinderbox/tags/tag-list';
        
    my $response = get($url) || die "Couldn't get $url\n";
    my %h;
    foreach(split /\n/, $response)
    {
	unless (/\#.*/)
	{
	    (my $name, my $base, my $tag, my $dirs) = split / : /, $_;
	    
	    $h{$name}= 
	    {
		'base' => $base,
		'tag'  => $tag,
		'dirs' => [split / /, $dirs]
		};
	}
    }
    return \%h;
}

sub latest_milestone()
{
    my $url = 'http://go-oo.org/tinderbox/tags/tag-latest-master-list';
    
    my $response = get($url) || die "Couldn't get $url\n";
    foreach(split /\n/, $response)
    {
	unless (/\#.*/)
	{
	    (my $name, my $base, my $tag, my $dirs) = split / : /, $_;
	    return $name;
	}
    }
    die "couldn't find latest milestone!\n";
}


####  cache 
#note: expects $CACHE_SIZE to be set
# cache_get(milestone)
sub cache_get($)
{
    my $milestone= shift;
    our %meta;
    tie %meta, "DB_File", "cws_get_cache.db";

#    print "my milestone is $milestone\n";
#    print "my cache is: " . Dumper(\%meta) . "\n";

    rmtree 'workdir' if -d 'workdir';
    mkdir 'workdir';
    
    if ($meta{$milestone})
    { #cache hit
	print "$milestone is a cache hit\n";

	my $cwd = &Cwd::cwd();		
	die "can't find tarball!" unless -f "$cwd/$milestone.tar.bz2";
	chdir 'workdir';
	run('tar', 'xjf', "$cwd/$milestone.tar.bz2");
	chdir $cwd;
	$meta{$milestone} = time();      
    }
    else
    { #cache miss
	print "$milestone is a cache miss\n";

	unless (keys %meta < $CACHE_SIZE)
	{
	    my $evictee = (sort { $meta{$b} <=> $meta{$a} } keys %meta)[0];
	    delete $meta{$evictee};
	    unlink "$evictee.tar.bz2";
	    print "evicted \"$evictee\"\n";
	}

	# grab milestone, copy over, compress, and put in cache
	my $milestone_dir= grab_milestone($milestone);
	$meta{$milestone} = time();

	rcopy($milestone_dir, 'workdir') or die "couldn't copy to workdir!\n";
    }
    untie %meta;
}

sub is_milestone($)
{
    my $name= shift;
    return 1 if ($name =~ /\w+680_m\d+/);
    return 0;
}

##################  Main

my $help_option;
my $branch= '';

# our (%meta, $k, $v);
# tie %meta, "DB_File", "cws_get_cache.db";
# while (($k, $v) = each %meta)
# { print "$k -> $v\n" }
# untie %meta;
# die "now";


GetOptions('help'        => \$help_option,
	   'branch:s'    => \$branch);

if ($help_option)
{
    print STDERR "Usage:\n";
    print STDERR "\t$0 [--branch=<branch>]\n";
    print STDERR "\twhere <branch> is a cws name or milestone name\n";
    print STDERR "Examples:\n";
    print STDERR "\"$0 --branch=SRC680_m212\"  get SRC680 milestone 212\n";
    print STDERR "\"$0 --branch=swwarnings\"  get swwarnings cws\n";
    print STDERR "\"$0 --branch=HEAD\"  get latest SRC680 milestone\n";
    print STDERR "\"$0\"  get latest SRC680 milestone\n\n\n";
    exit 1;
}

grab_cws_or_milestone($branch);
exit 0;
